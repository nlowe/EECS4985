#include "stdafx.h"
#include "AESValidationTests.h"
#include "../libcrypto/AES/AES.h"
#include <iostream>
#include <iomanip>

namespace ValidationTests
{
	namespace aes
	{
		void printBlockToCERR(uint8_t* buff)
		{
			for(auto i = 0; i < 16; i++)
			{
				std::cerr << std::setfill('0') << std::setw(2) << std::hex << std::uppercase << (static_cast<int>(buff[i]) & 0xFF);
			}
		}

		bool blockEquals(uint8_t* src, uint8_t* dst, size_t len)
		{
			for(auto i = 0; i < len; i++)
			{
				if (src[i] != dst[i]) return false;
			}

			return true;
		}

		int ECBGFSBox128Encrypt()
		{
			std::cout << "\tTesting GFSBox Encryption in ECB Mode with 128-bit keys" << std::endl;

			uint8_t plaintext[7][16] = {
				{0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6},
				{0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72},
				{0x96, 0xab, 0x5c, 0x2f, 0xf6, 0x12, 0xd9, 0xdf, 0xaa, 0xe8, 0xc3, 0x1f, 0x30, 0xc4, 0x21, 0x68},
				{0x6a, 0x11, 0x8a, 0x87, 0x45, 0x19, 0xe6, 0x4e, 0x99, 0x63, 0x79, 0x8a, 0x50, 0x3f, 0x1d, 0x35},
				{0xcb, 0x9f, 0xce, 0xec, 0x81, 0x28, 0x6c, 0xa3, 0xe9, 0x89, 0xbd, 0x97, 0x9b, 0x0c, 0xb2, 0x84},
				{0xb2, 0x6a, 0xeb, 0x18, 0x74, 0xe4, 0x7c, 0xa8, 0x35, 0x8f, 0xf2, 0x23, 0x78, 0xf0, 0x91, 0x44},
				{0x58, 0xc8, 0xe0, 0x0b, 0x26, 0x31, 0x68, 0x6d, 0x54, 0xea, 0xb8, 0x4b, 0x91, 0xf0, 0xac, 0xa1}
			};

			uint8_t ciphertext[7][16] = {
				{0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e},
				{0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89},
				{0xff, 0x4f, 0x83, 0x91, 0xa6, 0xa4, 0x0c, 0xa5, 0xb2, 0x5d, 0x23, 0xbe, 0xdd, 0x44, 0xa5, 0x97},
				{0xdc, 0x43, 0xbe, 0x40, 0xbe, 0x0e, 0x53, 0x71, 0x2f, 0x7e, 0x2b, 0xf5, 0xca, 0x70, 0x72, 0x09},
				{0x92, 0xbe, 0xed, 0xab, 0x18, 0x95, 0xa9, 0x4f, 0xaa, 0x69, 0xb6, 0x32, 0xe5, 0xcc, 0x47, 0xce},
				{0x45, 0x92, 0x64, 0xf4, 0x79, 0x8f, 0x6a, 0x78, 0xba, 0xcb, 0x89, 0xc1, 0x5e, 0xd3, 0xd6, 0x01},
				{0x08, 0xa4, 0xe2, 0xef, 0xec, 0x8a, 0x8e, 0x33, 0x12, 0xca, 0x74, 0x60, 0xb9, 0x04, 0x0b, 0xbf}
			};

			char rawKey[16] = { 0 };

			auto key = libcrypto::aes::make_block(rawKey, 0);

			auto failures = 0;
			for(auto i = 0; i < 7; i++)
			{
				auto result = libcrypto::aes::Encrypt(reinterpret_cast<char*>(plaintext[i]), 16, key);
				if (result != 0)
				{
					std::cerr << "\t  Failure in ECB Encryption (Error code " << result << ")" << std::endl;
					failures++;
				}
				else
				{
					if(!blockEquals(ciphertext[i], plaintext[i], 16))
					{
						std::cerr << "\t  Failure in ECB Encryption (Expected: ";
						printBlockToCERR(ciphertext[i]);
						std::cerr << " but got ";
						printBlockToCERR(plaintext[i]);
						std::cerr << ")" << std::endl;
						failures++;
					}
				}
			}

			return failures;
		}

		int ECBGFSBox128Decrypt()
		{
			std::cout << "\tTesting GFSBox Decryption in ECB Mode with 128-bit keys" << std::endl;

			uint8_t ciphertext[6][16] = {
				{0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e},
				{0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89},
				{0xff, 0x4f, 0x83, 0x91, 0xa6, 0xa4, 0x0c, 0xa5, 0xb2, 0x5d, 0x23, 0xbe, 0xdd, 0x44, 0xa5, 0x97},
				{0xdc, 0x43, 0xbe, 0x40, 0xbe, 0x0e, 0x53, 0x71, 0x2f, 0x7e, 0x2b, 0xf5, 0xca, 0x70, 0x72, 0x09},
				{0x92, 0xbe, 0xed, 0xab, 0x18, 0x95, 0xa9, 0x4f, 0xaa, 0x69, 0xb6, 0x32, 0xe5, 0xcc, 0x47, 0xce},
				{0x45, 0x92, 0x64, 0xf4, 0x79, 0x8f, 0x6a, 0x78, 0xba, 0xcb, 0x89, 0xc1, 0x5e, 0xd3, 0xd6, 0x01}
			};

			uint8_t plaintext[6][16] = {
				{0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6},
				{0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72},
				{0x96, 0xab, 0x5c, 0x2f, 0xf6, 0x12, 0xd9, 0xdf, 0xaa, 0xe8, 0xc3, 0x1f, 0x30, 0xc4, 0x21, 0x68},
				{0x6a, 0x11, 0x8a, 0x87, 0x45, 0x19, 0xe6, 0x4e, 0x99, 0x63, 0x79, 0x8a, 0x50, 0x3f, 0x1d, 0x35},
				{0xcb, 0x9f, 0xce, 0xec, 0x81, 0x28, 0x6c, 0xa3, 0xe9, 0x89, 0xbd, 0x97, 0x9b, 0x0c, 0xb2, 0x84},
				{0xb2, 0x6a, 0xeb, 0x18, 0x74, 0xe4, 0x7c, 0xa8, 0x35, 0x8f, 0xf2, 0x23, 0x78, 0xf0, 0x91, 0x44}
			};
			
			char rawBlock[16] = { 0 };

			auto key = libcrypto::aes::make_block(rawBlock, 0);

			auto failures = 0;
			for(auto i = 0; i < 6; i++)
			{
				auto result = libcrypto::aes::Decrypt(reinterpret_cast<char*>(ciphertext[i]), 16, key);
				if (result != 0)
				{
					std::cerr << "\t  Failure in ECB Decryption (Error code " << result << ")" << std::endl;
					failures++;
				}
				else
				{
					if(!blockEquals(plaintext[i], ciphertext[i], 16))
					{
						std::cerr << "\t  Failure in ECB Decryption (Expected: ";
						printBlockToCERR(plaintext[i]);
						std::cerr << " but got ";
						printBlockToCERR(ciphertext[i]);
						std::cerr << ")" << std::endl;
						failures++;
					}
				}
			}

			return failures;
		}

		int CBCGFSBox128Encrypt()
		{
			std::cout << "\tTesting GFSBox Encryption in CBC Mode with 128-bit keys" << std::endl;

			uint8_t plaintext[7][16] = {
				{0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6},
				{0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72},
				{0x96, 0xab, 0x5c, 0x2f, 0xf6, 0x12, 0xd9, 0xdf, 0xaa, 0xe8, 0xc3, 0x1f, 0x30, 0xc4, 0x21, 0x68},
				{0x6a, 0x11, 0x8a, 0x87, 0x45, 0x19, 0xe6, 0x4e, 0x99, 0x63, 0x79, 0x8a, 0x50, 0x3f, 0x1d, 0x35},
				{0xcb, 0x9f, 0xce, 0xec, 0x81, 0x28, 0x6c, 0xa3, 0xe9, 0x89, 0xbd, 0x97, 0x9b, 0x0c, 0xb2, 0x84},
				{0xb2, 0x6a, 0xeb, 0x18, 0x74, 0xe4, 0x7c, 0xa8, 0x35, 0x8f, 0xf2, 0x23, 0x78, 0xf0, 0x91, 0x44},
				{0x58, 0xc8, 0xe0, 0x0b, 0x26, 0x31, 0x68, 0x6d, 0x54, 0xea, 0xb8, 0x4b, 0x91, 0xf0, 0xac, 0xa1}
			};

			uint8_t ciphertext[7][16] = {
				{0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e},
				{0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89},
				{0xff, 0x4f, 0x83, 0x91, 0xa6, 0xa4, 0x0c, 0xa5, 0xb2, 0x5d, 0x23, 0xbe, 0xdd, 0x44, 0xa5, 0x97},
				{0xdc, 0x43, 0xbe, 0x40, 0xbe, 0x0e, 0x53, 0x71, 0x2f, 0x7e, 0x2b, 0xf5, 0xca, 0x70, 0x72, 0x09},
				{0x92, 0xbe, 0xed, 0xab, 0x18, 0x95, 0xa9, 0x4f, 0xaa, 0x69, 0xb6, 0x32, 0xe5, 0xcc, 0x47, 0xce},
				{0x45, 0x92, 0x64, 0xf4, 0x79, 0x8f, 0x6a, 0x78, 0xba, 0xcb, 0x89, 0xc1, 0x5e, 0xd3, 0xd6, 0x01},
				{0x08, 0xa4, 0xe2, 0xef, 0xec, 0x8a, 0x8e, 0x33, 0x12, 0xca, 0x74, 0x60, 0xb9, 0x04, 0x0b, 0xbf}
			};

			char rawBlock[16] = { 0 };

			auto key = libcrypto::aes::make_block(rawBlock, 0);

			auto failures = 0;
			for(auto i = 0; i < 7; i++)
			{
				auto result = libcrypto::aes::Encrypt(reinterpret_cast<char*>(plaintext[i]), 16, key, key);
				if (result != 0)
				{
					std::cerr << "\t  Failure in CBC Encryption (Error code " << result << ")" << std::endl;
					failures++;
				}
				else
				{
					if(!blockEquals(ciphertext[i], plaintext[i], 16))
					{
						std::cerr << "\t  Failure in CBC Encryption (Expected: ";
						printBlockToCERR(ciphertext[i]);
						std::cerr << " but got ";
						printBlockToCERR(plaintext[i]);
						std::cerr << ")" << std::endl;
						failures++;
					}
				}
			}

			return failures;
		}

		int CBCGFSBox128Decrypt()
		{
			std::cout << "\tTesting GFSBox Decryption in CBC Mode with 128-bit keys" << std::endl;

			uint8_t ciphertext[6][16] = {
				{0x03, 0x36, 0x76, 0x3e, 0x96, 0x6d, 0x92, 0x59, 0x5a, 0x56, 0x7c, 0xc9, 0xce, 0x53, 0x7f, 0x5e},
				{0xa9, 0xa1, 0x63, 0x1b, 0xf4, 0x99, 0x69, 0x54, 0xeb, 0xc0, 0x93, 0x95, 0x7b, 0x23, 0x45, 0x89},
				{0xff, 0x4f, 0x83, 0x91, 0xa6, 0xa4, 0x0c, 0xa5, 0xb2, 0x5d, 0x23, 0xbe, 0xdd, 0x44, 0xa5, 0x97},
				{0xdc, 0x43, 0xbe, 0x40, 0xbe, 0x0e, 0x53, 0x71, 0x2f, 0x7e, 0x2b, 0xf5, 0xca, 0x70, 0x72, 0x09},
				{0x92, 0xbe, 0xed, 0xab, 0x18, 0x95, 0xa9, 0x4f, 0xaa, 0x69, 0xb6, 0x32, 0xe5, 0xcc, 0x47, 0xce},
				{0x45, 0x92, 0x64, 0xf4, 0x79, 0x8f, 0x6a, 0x78, 0xba, 0xcb, 0x89, 0xc1, 0x5e, 0xd3, 0xd6, 0x01}
			};

			uint8_t plaintext[6][16] = {
				{0xf3, 0x44, 0x81, 0xec, 0x3c, 0xc6, 0x27, 0xba, 0xcd, 0x5d, 0xc3, 0xfb, 0x08, 0xf2, 0x73, 0xe6},
				{0x97, 0x98, 0xc4, 0x64, 0x0b, 0xad, 0x75, 0xc7, 0xc3, 0x22, 0x7d, 0xb9, 0x10, 0x17, 0x4e, 0x72},
				{0x96, 0xab, 0x5c, 0x2f, 0xf6, 0x12, 0xd9, 0xdf, 0xaa, 0xe8, 0xc3, 0x1f, 0x30, 0xc4, 0x21, 0x68},
				{0x6a, 0x11, 0x8a, 0x87, 0x45, 0x19, 0xe6, 0x4e, 0x99, 0x63, 0x79, 0x8a, 0x50, 0x3f, 0x1d, 0x35},
				{0xcb, 0x9f, 0xce, 0xec, 0x81, 0x28, 0x6c, 0xa3, 0xe9, 0x89, 0xbd, 0x97, 0x9b, 0x0c, 0xb2, 0x84},
				{0xb2, 0x6a, 0xeb, 0x18, 0x74, 0xe4, 0x7c, 0xa8, 0x35, 0x8f, 0xf2, 0x23, 0x78, 0xf0, 0x91, 0x44}
			};

			char rawBlock[16] = { 0 };

			auto key = libcrypto::aes::make_block(rawBlock, 0);

			auto failures = 0;
			for(auto i = 0; i < 6; i++)
			{
				auto result = libcrypto::aes::Decrypt(reinterpret_cast<char*>(ciphertext[i]), 16, key, key);
				if (result != 0)
				{
					std::cerr << "\t  Failure in CBC Decryption (Error code " << result << ")" << std::endl;
					failures++;
				}
				else
				{
					if(!blockEquals(plaintext[i], ciphertext[i], 16))
					{
						std::cerr << "\t  Failure in CBC Decryption (Expected: ";
						printBlockToCERR(plaintext[i]);
						std::cerr << " but got ";
						printBlockToCERR(ciphertext[i]);
						std::cerr << ")" << std::endl;
						failures++;
					}
				}
			}

			return failures;
		}

		int Validate()
		{
			auto result = 0;

			result += ECBGFSBox128Encrypt();
			result += ECBGFSBox128Decrypt();
			result += CBCGFSBox128Encrypt();
			result += CBCGFSBox128Decrypt();

			return result;
		}
	}
}
